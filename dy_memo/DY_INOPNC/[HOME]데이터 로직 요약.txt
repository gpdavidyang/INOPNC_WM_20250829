[HOME]데이터 로직 요약
1) 입력·선택 데이터(기본 정보)

일자: <input type="date" class="form-input">로 날짜를 받습니다(브라우저 기본 캘린더 아이콘은 숨김). 


현장/위치: 선택된 현장 표시 #selectedSiteDisplay, 블럭/동/호수 #block, #building, #unit(가운데 정렬). 


선택형 필드: 공통 드롭다운 .form-select(세미볼드 값, 커스텀 화살표). 

main

텍스트/숫자 입력: 공통 .form-input(높이/폰트 통일). 


2) 공수(일) 및 증감 컨트롤

공수 입력은 .number-input 컨테이너와 - / + 버튼(.number-btn) + 값 필드(.number-field) 조합으로 암시됩니다(세미볼드 버튼). 즉, 클릭 이벤트로 증감 → 값 반영 → 합산/검증 로직이 JS로 이어져야 합니다(현재 파일엔 미포함). 

3) 동적 섹션(추가/삭제)

작업 태그/구간 추가: .additional-work-row(섹션 헤더와 내용 그리드).

추가 공수: .additional-manpower-row 내부에 작성자 드롭다운 + 공수 컨트롤 + 삭제 버튼(.delete-tag-btn) 패턴. 이 구조는 “행 추가/삭제”와 “합계 재계산” 같은 동적 데이터 로직을 전제로 합니다. 

4) 파일(사진) 데이터: 전/후 관리

업로드 UI는 전(before)/후(after) 영역을 분리해 배치합니다: .photo-upload-grid + .upload-area.before-area / .upload-area.after-area + 카운터(.upload-counter, .counter-number, .counter-total). 즉, 각 영역별 파일 리스트와 개수 제한/표시 로직이 필요합니다(표시는 스타일로만, 로직은 미포함). 

5) 요약/검토 뷰(프리뷰 데이터)

제출 전 요약 패널: .summary-grid / .summary-row / .summary-item으로 주요 입력값을 행 단위 정리(사진/도면/블럭·동·호수 등은 구분 라인 강조). 도면 섹션은 .drawing-section으로 별도 구획. 즉, 입력 상태 → 요약 데이터 매핑/렌더 로직이 JS로 필요합니다. 


6) 표시 상태(테마/가독성) = 표현 레벨 상태값

테마 변수: :root CSS 변수와 [data-theme="dark"] 오버라이드로 다크모드 표현 상태를 관리(데이터라기보다 표시 상태). 

큰글씨 모드: .main-page-content.fs-150가 적용되면 본문 전체 폰트/컨트롤 크기 확대(접근성 상태). 

빠른메뉴 그리드: #quick-menu.quick-grid 구조(데이터와 직접 연동되진 않으나, 항목 클릭 → 라우팅/액션을 트리거하는 UI로 추정). 

구현(또는 점검)해야 할 실제 데이터 로직

아래는 파일이 암시하는 필수 JS/백엔드 로직 체크리스트입니다.

상태 스키마: workDate, site, location:{block,building,unit}, workItems[], manpower[], photos:{before[], after[]}, drawings[], author, notes 등으로 앱 상태 모델 정리.

검증: 필수값(일자·현장·작성자 등)과 공수 범위, 중복 태그 방지, 사진 개수 제한.

동적 행 관리: 추가/삭제 시 합계 재계산과 요약뷰 동기화.

업로드 파이프라인: 전/후 파일 분리 보관, 미리보기/개수 카운트, 업로드 실패/중단 처리.

요약 매핑: 현재 입력 상태 → .summary-*에 바인딩해 실시간 프리뷰.

제출/저장: 직렬화(JSON) 후 API 전송·임시저장·복원(초안) 로직.